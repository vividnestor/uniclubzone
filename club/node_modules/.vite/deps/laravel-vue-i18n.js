import {
  require_vue
} from "./chunk-HFO5QXRU.js";
import "./chunk-2M7ZIVU2.js";
import "./chunk-NW6DXKIY.js";
import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/laravel-vue-i18n/dist/utils/get-plural-index.js
var require_get_plural_index = __commonJS({
  "node_modules/laravel-vue-i18n/dist/utils/get-plural-index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPluralIndex = void 0;
    function getPluralIndex(lang, number) {
      switch (lang.replace("_", "-")) {
        case "af":
        case "af-ZA":
        case "bn":
        case "bn-BD":
        case "bn-IN":
        case "bg":
        case "bg-BG":
        case "ca":
        case "ca-AD":
        case "ca-ES":
        case "ca-FR":
        case "ca-IT":
        case "da":
        case "da-DK":
        case "de":
        case "de-AT":
        case "de-BE":
        case "de-CH":
        case "de-DE":
        case "de-LI":
        case "de-LU":
        case "el":
        case "el-CY":
        case "el-GR":
        case "en":
        case "en-AG":
        case "en-AU":
        case "en-BW":
        case "en-CA":
        case "en-DK":
        case "en-GB":
        case "en-HK":
        case "en-IE":
        case "en-IN":
        case "en-NG":
        case "en-NZ":
        case "en-PH":
        case "en-SG":
        case "en-US":
        case "en-ZA":
        case "en-ZM":
        case "en-ZW":
        case "eo":
        case "eo-US":
        case "es":
        case "es-AR":
        case "es-BO":
        case "es-CL":
        case "es-CO":
        case "es-CR":
        case "es-CU":
        case "es-DO":
        case "es-EC":
        case "es-ES":
        case "es-GT":
        case "es-HN":
        case "es-MX":
        case "es-NI":
        case "es-PA":
        case "es-PE":
        case "es-PR":
        case "es-PY":
        case "es-SV":
        case "es-US":
        case "es-UY":
        case "es-VE":
        case "et":
        case "et-EE":
        case "eu":
        case "eu-ES":
        case "eu-FR":
        case "fa":
        case "fa-IR":
        case "fi":
        case "fi-FI":
        case "fo":
        case "fo-FO":
        case "fur":
        case "fur-IT":
        case "fy":
        case "fy-DE":
        case "fy-NL":
        case "gl":
        case "gl-ES":
        case "gu":
        case "gu-IN":
        case "ha":
        case "ha-NG":
        case "he":
        case "he-IL":
        case "hu":
        case "hu-HU":
        case "is":
        case "is-IS":
        case "it":
        case "it-CH":
        case "it-IT":
        case "ku":
        case "ku-TR":
        case "lb":
        case "lb-LU":
        case "ml":
        case "ml-IN":
        case "mn":
        case "mn-MN":
        case "mr":
        case "mr-IN":
        case "nah":
        case "nb":
        case "nb-NO":
        case "ne":
        case "ne-NP":
        case "nl":
        case "nl-AW":
        case "nl-BE":
        case "nl-NL":
        case "nn":
        case "nn-NO":
        case "no":
        case "om":
        case "om-ET":
        case "om-KE":
        case "or":
        case "or-IN":
        case "pa":
        case "pa-IN":
        case "pa-PK":
        case "pap":
        case "pap-AN":
        case "pap-AW":
        case "pap-CW":
        case "ps":
        case "ps-AF":
        case "pt":
        case "pt-BR":
        case "pt-PT":
        case "so":
        case "so-DJ":
        case "so-ET":
        case "so-KE":
        case "so-SO":
        case "sq":
        case "sq-AL":
        case "sq-MK":
        case "sv":
        case "sv-FI":
        case "sv-SE":
        case "sw":
        case "sw-KE":
        case "sw-TZ":
        case "ta":
        case "ta-IN":
        case "ta-LK":
        case "te":
        case "te-IN":
        case "tk":
        case "tk-TM":
        case "ur":
        case "ur-IN":
        case "ur-PK":
        case "zu":
        case "zu-ZA":
          return number === 1 ? 0 : 1;
        case "am":
        case "am-ET":
        case "bh":
        case "fil":
        case "fil-PH":
        case "fr":
        case "fr-BE":
        case "fr-CA":
        case "fr-CH":
        case "fr-FR":
        case "fr-LU":
        case "gun":
        case "hi":
        case "hi-IN":
        case "hy":
        case "hy-AM":
        case "ln":
        case "ln-CD":
        case "mg":
        case "mg-MG":
        case "nso":
        case "nso-ZA":
        case "ti":
        case "ti-ER":
        case "ti-ET":
        case "wa":
        case "wa-BE":
        case "xbr":
          return number === 0 || number === 1 ? 0 : 1;
        case "be":
        case "be-BY":
        case "bs":
        case "bs-BA":
        case "hr":
        case "hr-HR":
        case "ru":
        case "ru-RU":
        case "ru-UA":
        case "sr":
        case "sr-ME":
        case "sr-RS":
        case "uk":
        case "uk-UA":
          return number % 10 == 1 && number % 100 != 11 ? 0 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 10 || number % 100 >= 20) ? 1 : 2;
        case "cs":
        case "cs-CZ":
        case "sk":
        case "sk-SK":
          return number == 1 ? 0 : number >= 2 && number <= 4 ? 1 : 2;
        case "ga":
        case "ga-IE":
          return number == 1 ? 0 : number == 2 ? 1 : 2;
        case "lt":
        case "lt-LT":
          return number % 10 == 1 && number % 100 != 11 ? 0 : number % 10 >= 2 && (number % 100 < 10 || number % 100 >= 20) ? 1 : 2;
        case "sl":
        case "sl-SI":
          return number % 100 == 1 ? 0 : number % 100 == 2 ? 1 : number % 100 == 3 || number % 100 == 4 ? 2 : 3;
        case "mk":
        case "mk-MK":
          return number % 10 == 1 ? 0 : 1;
        case "mt":
        case "mt-MT":
          return number == 1 ? 0 : number == 0 || number % 100 > 1 && number % 100 < 11 ? 1 : number % 100 > 10 && number % 100 < 20 ? 2 : 3;
        case "lv":
        case "lv-LV":
          return number == 0 ? 0 : number % 10 == 1 && number % 100 != 11 ? 1 : 2;
        case "pl":
        case "pl-PL":
          return number == 1 ? 0 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 12 || number % 100 > 14) ? 1 : 2;
        case "cy":
        case "cy-GB":
          return number == 1 ? 0 : number == 2 ? 1 : number == 8 || number == 11 ? 2 : 3;
        case "ro":
        case "ro-RO":
          return number == 1 ? 0 : number == 0 || number % 100 > 0 && number % 100 < 20 ? 1 : 2;
        case "ar":
        case "ar-AE":
        case "ar-BH":
        case "ar-DZ":
        case "ar-EG":
        case "ar-IN":
        case "ar-IQ":
        case "ar-JO":
        case "ar-KW":
        case "ar-LB":
        case "ar-LY":
        case "ar-MA":
        case "ar-OM":
        case "ar-QA":
        case "ar-SA":
        case "ar-SD":
        case "ar-SS":
        case "ar-SY":
        case "ar-TN":
        case "ar-YE":
          return number == 0 ? 0 : number == 1 ? 1 : number == 2 ? 2 : number % 100 >= 3 && number % 100 <= 10 ? 3 : number % 100 >= 11 && number % 100 <= 99 ? 4 : 5;
        default:
          return 0;
      }
    }
    exports.getPluralIndex = getPluralIndex;
  }
});

// node_modules/laravel-vue-i18n/dist/pluralization.js
var require_pluralization = __commonJS({
  "node_modules/laravel-vue-i18n/dist/pluralization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.choose = void 0;
    var get_plural_index_1 = require_get_plural_index();
    function choose(message, number, lang) {
      let segments = message.split("|");
      const extracted = extract(segments, number);
      if (extracted !== null) {
        return extracted.trim();
      }
      segments = stripConditions(segments);
      const pluralIndex = (0, get_plural_index_1.getPluralIndex)(lang, number);
      if (segments.length === 1 || !segments[pluralIndex]) {
        return segments[0];
      }
      return segments[pluralIndex];
    }
    exports.choose = choose;
    function extract(segments, number) {
      for (const part of segments) {
        let line = extractFromString(part, number);
        if (line !== null) {
          return line;
        }
      }
      return null;
    }
    function extractFromString(part, number) {
      const matches = part.match(/^[\{\[]([^\[\]\{\}]*)[\}\]](.*)/s) || [];
      if (matches.length !== 3) {
        return null;
      }
      const condition = matches[1];
      const value = matches[2];
      if (condition.includes(",")) {
        let [from, to] = condition.split(",");
        if (to === "*" && number >= parseFloat(from)) {
          return value;
        } else if (from === "*" && number <= parseFloat(to)) {
          return value;
        } else if (number >= parseFloat(from) && number <= parseFloat(to)) {
          return value;
        }
      }
      return parseFloat(condition) === number ? value : null;
    }
    function stripConditions(segments) {
      return segments.map((part) => part.replace(/^[\{\[]([^\[\]\{\}]*)[\}\]]/, ""));
    }
  }
});

// node_modules/laravel-vue-i18n/dist/utils/avoid-exceptions.js
var require_avoid_exceptions = __commonJS({
  "node_modules/laravel-vue-i18n/dist/utils/avoid-exceptions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.avoidExceptionOnPromise = exports.avoidException = void 0;
    var avoidException = (callback, param, defaults = {}) => {
      try {
        return callback(param);
      } catch (_a) {
        return defaults;
      }
    };
    exports.avoidException = avoidException;
    var avoidExceptionOnPromise = (promise, defaults = {}) => __awaiter(void 0, void 0, void 0, function* () {
      try {
        return (yield promise).default || defaults;
      } catch (e) {
        return defaults;
      }
    });
    exports.avoidExceptionOnPromise = avoidExceptionOnPromise;
  }
});

// node_modules/laravel-vue-i18n/dist/index.js
var require_dist = __commonJS({
  "node_modules/laravel-vue-i18n/dist/index.js"(exports) {
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i18nVue = exports.trans_choice = exports.reset = exports.getActiveLanguage = exports.wTransChoice = exports.transChoice = exports.wTrans = exports.trans = exports.loadLanguageAsync = exports.isLoaded = void 0;
    var vue_1 = require_vue();
    var pluralization_1 = require_pluralization();
    var avoid_exceptions_1 = require_avoid_exceptions();
    var isServer = typeof window === "undefined";
    var DEFAULT_OPTIONS = {
      lang: !isServer && document.documentElement.lang ? document.documentElement.lang.replace("-", "_") : "en",
      resolve: (lang) => new Promise((resolve) => resolve({ default: {} }))
    };
    var options = DEFAULT_OPTIONS;
    var loaded = [];
    var activeMessages = (0, vue_1.reactive)({});
    function isLoaded(lang) {
      lang !== null && lang !== void 0 ? lang : lang = getActiveLanguage();
      lang = lang.replace("-", "_");
      return loaded.some((row) => row.lang === lang);
    }
    exports.isLoaded = isLoaded;
    function loadLanguageAsync(lang) {
      lang = lang.replace("-", "_");
      const loadedLang = loaded.find((row) => row.lang === lang);
      if (loadedLang) {
        return Promise.resolve(setLanguage(loadedLang));
      }
      return resolveLang(options.resolve, lang).then(({ default: messages }) => {
        const data = { lang, messages };
        loaded.push(data);
        return setLanguage(data);
      });
    }
    exports.loadLanguageAsync = loadLanguageAsync;
    function trans(key, replacements = {}) {
      return wTrans(key, replacements).value;
    }
    exports.trans = trans;
    function wTrans(key, replacements = {}) {
      if (!activeMessages[key]) {
        activeMessages[key] = key;
      }
      return (0, vue_1.computed)(() => makeReplacements(activeMessages[key], replacements));
    }
    exports.wTrans = wTrans;
    function transChoice(key, number, replacements = {}) {
      return wTransChoice(key, number, replacements).value;
    }
    exports.transChoice = transChoice;
    function wTransChoice(key, number, replacements = {}) {
      const message = wTrans(key, replacements);
      replacements.count = number.toString();
      return (0, vue_1.computed)(() => makeReplacements((0, pluralization_1.choose)(message.value, number, options.lang), replacements));
    }
    exports.wTransChoice = wTransChoice;
    function getActiveLanguage() {
      return options.lang;
    }
    exports.getActiveLanguage = getActiveLanguage;
    function setLanguage({ lang, messages }) {
      if (!isServer) {
        document.documentElement.setAttribute("lang", lang.replace("_", "-"));
      }
      options.lang = lang;
      for (const [key, value] of Object.entries(messages)) {
        activeMessages[key] = value;
      }
      for (const [key] of Object.entries(activeMessages)) {
        if (!messages[key]) {
          activeMessages[key] = null;
        }
      }
      return lang;
    }
    function resolveLang(callable, lang) {
      return __awaiter(this, void 0, void 0, function* () {
        const hasPhpTranslations = typeof process !== "undefined" && process.env ? process.env.LARAVEL_VUE_I18N_HAS_PHP : false;
        let data = (0, avoid_exceptions_1.avoidException)(callable, lang);
        if (data instanceof Promise) {
          if (hasPhpTranslations) {
            const phpLang = yield (0, avoid_exceptions_1.avoidExceptionOnPromise)(callable(`php_${lang}`));
            const jsonLang = yield (0, avoid_exceptions_1.avoidExceptionOnPromise)(data);
            return new Promise((resolve) => resolve({
              default: Object.assign(Object.assign({}, phpLang), jsonLang)
            }));
          }
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            return resolve({
              default: yield (0, avoid_exceptions_1.avoidExceptionOnPromise)(data)
            });
          }));
        }
        if (hasPhpTranslations) {
          return new Promise((resolve) => resolve({
            default: Object.assign(Object.assign({}, data), (0, avoid_exceptions_1.avoidException)(callable, `php_${lang}`))
          }));
        }
        return new Promise((resolve) => resolve({ default: data }));
      });
    }
    function makeReplacements(message, replacements) {
      const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);
      Object.entries(replacements || []).forEach(([key, value]) => {
        value = value.toString();
        message = message.replace(`:${key}`, value).replace(`:${key.toUpperCase()}`, value.toUpperCase()).replace(`:${capitalize(key)}`, capitalize(value));
      });
      return message;
    }
    var reset = () => {
      loaded = [];
      options = DEFAULT_OPTIONS;
      for (const [key] of Object.entries(activeMessages)) {
        activeMessages[key] = null;
      }
    };
    exports.reset = reset;
    exports.trans_choice = transChoice;
    exports.i18nVue = {
      install: (app, currentOptions = {}) => {
        options = Object.assign(Object.assign({}, options), currentOptions);
        app.config.globalProperties.$t = (key, replacements) => trans(key, replacements);
        app.config.globalProperties.$tChoice = (key, number, replacements) => transChoice(key, number, replacements);
        loadLanguageAsync(options.lang);
      }
    };
  }
});
export default require_dist();
//# sourceMappingURL=laravel-vue-i18n.js.map
